<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
    <converters:NullableToVisibilityConverter x:Key="nullableToVisibilityConverter" />

    <Style x:Key="MaterialDesignStepButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="wpf:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <AdornerDecorator>
                            <AdornerDecorator.CacheMode>
                                <BitmapCache EnableClearType="True" SnapsToDevicePixels="True"/>
                            </AdornerDecorator.CacheMode>
                            <Border Background="Transparent"
                                    BorderThickness="0"
                                    x:Name="border"
                                    Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}">
                            </Border>
                        </AdornerDecorator>
                        <wpf:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"     
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Margin="0" Padding="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignStepperSpaceLine" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesignDivider}" />
        <!--<Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignDivider}" />-->
        <Setter Property="Margin" Value="0" />
    </Style>

    <Style x:Key="MaterialDesignVerticalStepperSpaceLine" TargetType="{x:Type Border}" BasedOn="{StaticResource MaterialDesignStepperSpaceLine}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="1" />
        <!--<Setter Property="BorderThickness" Value="1,0,0,0" />-->
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style x:Key="MaterialDesignVerticalStepButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignStepButton}">
        <!--<Setter Property="Content">
            <Setter.Value>
            </Setter.Value>
        </Setter>-->
    </Style>

    <ControlTemplate x:Key="VerticalStepActive" TargetType="{x:Type wpf:Step}"></ControlTemplate>
    
    <Style TargetType="{x:Type wpf:Stepper}">
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type wpf:Stepper}">
                            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                </Grid.RowDefinitions>
                                <Border></Border>
                                <ContentControl />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type wpf:Stepper}">
                            <ItemsControl HorizontalAlignment="Stretch" ItemsSource="{Binding Path=Controller.Steps, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Top">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <!--<Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="60" />
                                                <ColumnDefinition Width="100*" />
                                            </Grid.ColumnDefinitions>
                                            <Border HorizontalAlignment="Left" Margin="36,8,12,0" VerticalAlignment="Stretch" Width="1" />
                                            <VirtualizingStackPanel Grid.Column="1" HorizontalAlignment="Stretch" IsItemsHost="True" Orientation="Vertical" VerticalAlignment="Top" />
                                        </Grid>-->
                                        <VirtualizingStackPanel Grid.Column="1" HorizontalAlignment="Stretch" IsItemsHost="True" Orientation="Vertical" VerticalAlignment="Top" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="60" />
                                                <ColumnDefinition Width="100*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="auto" />
                                                <RowDefinition Height="100*" />
                                                <RowDefinition Height="8" />
                                            </Grid.RowDefinitions>
                                            <!-- header as button to switch steps in non-linear steppers -->
                                            <Button Grid.ColumnSpan="2" Command="{x:Static wpf:Stepper.StepSelectedCommand}" CommandParameter="{Binding}">
                                                <Button.Style>
                                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignStepButton}">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Path=IsLinear, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type wpf:Stepper}}}" Value="False">
                                                                <Setter Property="Cursor" Value="Hand" />
                                                                <Setter Property="IsEnabled" Value="True" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding Path=IsLinear, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type wpf:Stepper}}}" Value="True">
                                                                <Setter Property="Cursor" Value="Arrow" />
                                                                <Setter Property="IsEnabled" Value="False" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Button.Style>
                                                <Grid HorizontalAlignment="Stretch">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="24" />
                                                        <ColumnDefinition Width="auto" />
                                                        <ColumnDefinition Width="12" />
                                                        <ColumnDefinition Width="100*" />
                                                    </Grid.ColumnDefinitions>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="auto" />
                                                        <RowDefinition Height="100*" />
                                                    </Grid.RowDefinitions>
                                                    <!-- circle -->
                                                    <Border Grid.Column="1" Background="{DynamicResource PrimaryHueMidBrush}" BorderThickness="0" CornerRadius="12" Height="24" SnapsToDevicePixels="True" VerticalAlignment="Top" Width="24">
                                                        <TextBlock FontSize="12" FontWeight="Regular" Foreground="{DynamicResource PrimaryHueMidForegroundBrush}" HorizontalAlignment="Center" Text="{Binding Path=Number}" VerticalAlignment="Center" />
                                                    </Border>
                                                    <!-- vertical line after the circle -->
                                                    <Border Grid.Column="1" Grid.Row="1" Style="{StaticResource MaterialDesignVerticalStepperSpaceLine}"
                                                                Margin="0,8,0,0" Padding="0" Visibility="{Binding Path=NeedsSpacer, Converter={StaticResource booleanToVisibilityConverter}}" />
                                                    <!-- header -->
                                                    <StackPanel Grid.Column="3" Grid.RowSpan="2" HorizontalAlignment="Stretch" Margin="0,3,0,16" Orientation="Vertical" VerticalAlignment="Top">
                                                        <TextBlock FontSize="14" FontWeight="Bold" Text="{Binding Path=Step.FirstLevelLabel}" />
                                                        <TextBlock FontSize="12" Text="{Binding Path=Step.SecondLevelLabel}"
                                                                Visibility="{Binding Path=Step.SecondLevelLabel, Converter={StaticResource nullableToVisibilityConverter}}" />
                                                    </StackPanel>
                                                </Grid>
                                            </Button>
                                            <!-- vertical line at the left side -->
                                            <Border Grid.Row="1" Margin="24,0,12,0" Padding="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                <Border Style="{StaticResource MaterialDesignVerticalStepperSpaceLine}" />
                                            </Border>
                                            <!-- content -->
                                            <StackPanel Grid.Column="1" Grid.Row="1" HorizontalAlignment="Stretch" Orientation="Vertical" VerticalAlignment="Stretch">
                                                <ContentControl Content="{Binding Path=Step.Content}" HorizontalAlignment="Stretch"
                                                                  Visibility="{Binding Path=IsActive, Converter={StaticResource booleanToVisibilityConverter}}" />
                                                <StackPanel HorizontalAlignment="Stretch" Margin="0,16,0,40">
                                                    <!-- buttons -->
                                                </StackPanel>
                                            </StackPanel>
                                        </Grid>
                                        <!--<Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="auto" />
                                                <ColumnDefinition Width="100*" />
                                            </Grid.ColumnDefinitions>
                                            <StackPanel Margin="24,0,12,0" Orientation="Vertical">
                                                <Border CornerRadius="12" Height="24" Width="24">
                                                    <TextBlock Text="{Binding Path=Number}" />
                                                </Border>
                                                <Border HorizontalAlignment="Center" Margin="0,8,0,0" VerticalAlignment="Stretch" Width="1">
                                                    <Border.Style>
                                                        <Style TargetType="{x:Type Border}">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Path=NeedsSpacer}" Value="False">
                                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding Path=NeedsSpacer}" Value="True">
                                                                    <Setter Property="Visibility" Value="Visible" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Border.Style>
                                                </Border>
                                            </StackPanel>
                                        </Grid>-->
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>